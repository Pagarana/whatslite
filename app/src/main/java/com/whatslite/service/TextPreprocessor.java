package com.whatslite.service;

import android.os.Build;
import android.util.Log;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

public class TextPreprocessor {
    private static final String TAG = "TextPreprocessor";
    
    // T√ºrk√ße karakter d√ºzeltmeleri
    private static final Map<String, String> TURKISH_FIXES = new HashMap<>();
    static {
        // Yaygƒ±n yazƒ±m hatalarƒ±
        TURKISH_FIXES.put("oylemi", "√∂yle mi");
        TURKISH_FIXES.put("nasilsin", "nasƒ±lsƒ±n");
        TURKISH_FIXES.put("nasilsƒ±n", "nasƒ±lsƒ±n");
        TURKISH_FIXES.put("nasƒ±lsƒ±n", "nasƒ±lsƒ±n");
        TURKISH_FIXES.put("naber", "ne haber");
        TURKISH_FIXES.put("slm", "selam");
        TURKISH_FIXES.put("selm", "selam");
        TURKISH_FIXES.put("mrhb", "merhaba");
        TURKISH_FIXES.put("mrb", "merhaba");
        TURKISH_FIXES.put("tmm", "tamam");
        TURKISH_FIXES.put("tamamdƒ±r", "tamam");
        TURKISH_FIXES.put("olr", "olur");
        TURKISH_FIXES.put("iyidir", "iyi");
        TURKISH_FIXES.put("iyiyim", "iyiyim");
        TURKISH_FIXES.put("te≈üekk√ºrler", "te≈üekk√ºr ederim");
        TURKISH_FIXES.put("t≈ük", "te≈üekk√ºr ederim");
        TURKISH_FIXES.put("t≈ükrlr", "te≈üekk√ºr ederim");
        TURKISH_FIXES.put("g√∂r√º≈ü√ºr√ºz", "g√∂r√º≈ü√ºr√ºz");
        TURKISH_FIXES.put("g√∂r√º≈ü√ºrz", "g√∂r√º≈ü√ºr√ºz");
        TURKISH_FIXES.put("gln", "g√ºlen");
        TURKISH_FIXES.put("knk", "kanka");
        
        // ƒ∞/i, √ú/√º, ƒû/g, ≈û/s, √á/c, √ñ/o d√ºzeltmeleri
        TURKISH_FIXES.put("gercekten", "ger√ßekten");
        TURKISH_FIXES.put("cogunlukla", "√ßoƒüunlukla");
        TURKISH_FIXES.put("bugun", "bug√ºn");
        TURKISH_FIXES.put("dun", "d√ºn");
        TURKISH_FIXES.put("yarin", "yarƒ±n");
        TURKISH_FIXES.put("aksamusic", "ak≈üam √ºst√º");
        TURKISH_FIXES.put("aksam", "ak≈üam");
        TURKISH_FIXES.put("sabahleyin", "sabahleyin");
        TURKISH_FIXES.put("oglen", "√∂ƒülen");
        TURKISH_FIXES.put("ogleden", "√∂ƒüleden");
    }
    
    // ƒ∞ngilizce casual fixes
    private static final Map<String, String> ENGLISH_FIXES = new HashMap<>();
    static {
        ENGLISH_FIXES.put("u", "you");
        ENGLISH_FIXES.put("ur", "your");
        ENGLISH_FIXES.put("r", "are");
        ENGLISH_FIXES.put("n", "and");
        ENGLISH_FIXES.put("thx", "thanks");
        ENGLISH_FIXES.put("ty", "thank you");
        ENGLISH_FIXES.put("np", "no problem");
        ENGLISH_FIXES.put("omg", "oh my god");
        ENGLISH_FIXES.put("lol", "laugh out loud");
        ENGLISH_FIXES.put("brb", "be right back");
        ENGLISH_FIXES.put("gtg", "got to go");
        ENGLISH_FIXES.put("ttyl", "talk to you later");
        ENGLISH_FIXES.put("hru", "how are you");
        ENGLISH_FIXES.put("wbu", "what about you");
        ENGLISH_FIXES.put("tbh", "to be honest");
        ENGLISH_FIXES.put("imo", "in my opinion");
        ENGLISH_FIXES.put("btw", "by the way");
        ENGLISH_FIXES.put("fyi", "for your information");
    }
    
    /**
     * Metni √ßeviri i√ßin hazƒ±rlar - yazƒ±m hatalarƒ±nƒ± d√ºzeltir
     */
    public static String preprocessText(String text, String language) {
        if (text == null || text.trim().isEmpty()) {
            return text;
        }
        
        Log.d(TAG, "üîß Preprocessing text (" + language + "): " + text);
        
        String processed = text.trim().toLowerCase();
        
        // Dile g√∂re d√ºzeltmeler
        if ("tr".equals(language)) {
            processed = fixTurkish(processed);
        } else if ("en".equals(language)) {
            processed = fixEnglish(processed);
        }
        
        // Genel d√ºzeltmeler
        processed = generalFixes(processed);
        
        Log.d(TAG, "‚úÖ Preprocessed result: " + processed);
        
        return processed;
    }
    
    private static String fixTurkish(String text) {
        String fixed = text;
        
        // Yaygƒ±n T√ºrk√ße hatalarƒ±nƒ± d√ºzelt
        for (Map.Entry<String, String> entry : TURKISH_FIXES.entrySet()) {
            fixed = fixed.replaceAll("\\b" + Pattern.quote(entry.getKey()) + "\\b", entry.getValue());
        }
        
        // T√ºrk√ße karakter eksikliklerini akƒ±llƒ± d√ºzelt
        fixed = smartTurkishCharacters(fixed);
        
        return fixed;
    }
    
    private static String fixEnglish(String text) {
        String fixed = text;
        
        // ƒ∞ngilizce casual language d√ºzelt
        for (Map.Entry<String, String> entry : ENGLISH_FIXES.entrySet()) {
            fixed = fixed.replaceAll("\\b" + Pattern.quote(entry.getKey()) + "\\b", entry.getValue());
        }
        
        return fixed;
    }
    
    private static String smartTurkishCharacters(String text) {
        // Akƒ±llƒ± T√ºrk√ße karakter d√ºzeltmeleri
        String fixed = text;
        
        // Context-aware d√ºzeltmeler
        fixed = fixed.replaceAll("\\bgƒ±l\\b", "gil"); // "gel" i√ßin
        fixed = fixed.replaceAll("\\bgeliyorum\\b", "geliyorum");
        fixed = fixed.replaceAll("\\bgidiyorum\\b", "gidiyorum");
        fixed = fixed.replaceAll("\\bi≈üi\\b", "i≈ü");
        fixed = fixed.replaceAll("\\b√∂yle\\b", "√∂yle");
        fixed = fixed.replaceAll("\\b√ßok\\b", "√ßok");
        
        return fixed;
    }
    
    private static String generalFixes(String text) {
        String fixed = text;
        
        // √áoklu bo≈üluklarƒ± d√ºzelt
        fixed = fixed.replaceAll("\\s+", " ");
        
        // Noktalama i≈üaretlerini d√ºzelt
        fixed = fixed.replaceAll("([.!?])([a-zA-Z])", "$1 $2");
        
        // Ba≈ülangƒ±√ß harfini b√ºy√ºk yap
        if (fixed.length() > 0) {
            fixed = fixed.substring(0, 1).toUpperCase() + fixed.substring(1);
        }
        
        return fixed.trim();
    }
    
    /**
     * Metinon quality score hesaplar (0-100)
     */
    public static int calculateTextQuality(String text) {
        if (text == null || text.trim().isEmpty()) return 0;
        
        int score = 100;
        
        // √áok kƒ±sa metinler i√ßin d√º≈ü√ºk skor
        if (text.length() < 3) score -= 30;
        
        // Sadece harf olmayan karakterler
        if (!text.matches(".*[a-zA-Z√ßƒüƒ±√∂≈ü√º√áƒûI√ñ≈û√ú].*")) score -= 50;
        
        // √áok fazla yazƒ±m hatasƒ± (heuristic)
        long spaceCount = 0;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            spaceCount = text.chars().filter(ch -> ch == ' ').count();
        }
        long wordCount = spaceCount + 1;
        if (text.length() / wordCount > 15) score -= 20; // √áok uzun kelimeler
        
        return Math.max(0, Math.min(100, score));
    }
}